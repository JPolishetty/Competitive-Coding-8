/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // traverse from right to left and make right subtree as flattened first   
    TreeNode prev;
    public void flatten(TreeNode root) {
        if(root == null){
            return ;
        }
        preorder(root);
    }

    public void preorder(TreeNode root){
        //base
        if(root == null){
            return;
        }
        //logic
        preorder(root.right);
        
        preorder(root.left);
        // makee current node's right to prev(already processed node) and make left to null 
        root.right = prev;
        root.left = null;
        // make prev to current node
        prev = root;
    }
}
